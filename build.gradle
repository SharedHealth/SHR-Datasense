buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/libs-snapshot" }
        maven { url "http://repo.spring.io/milestone" }
    }
    dependencies {
        classpath(
                "org.springframework.boot:spring-boot-gradle-plugin:1.1.8.RELEASE",
                "com.netflix.nebula:gradle-ospackage-plugin:2.0.2"
        )
    }
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'spring-boot'
apply plugin: 'rpm'
apply plugin: 'idea'
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

def localEnv = new Properties();
localEnv.load(new FileInputStream(file("${projectDir}/env/local.properties")))

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/snapshot" }
    maven { url "http://repo.spring.io/libs-snapshot" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://clojars.org/repo"}
}

task checkStyle(type: Checkstyle) {
    configFile file("${project.projectDir}/config/checkstyle/checkstyle.xml")
}

test {
    environment localEnv
}

jar.dependsOn 'checkStyle'

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

ext.libraries = [
        spring_framework     : "org.springframework:spring-core:4.1.1.RELEASE",
        spring_transaction   : "org.springframework:spring-tx:4.1.1.RELEASE",
        spring_jdbc          : "org.springframework:spring-jdbc:4.1.1.RELEASE",
        spring_boot_logging  : "org.springframework.boot:spring-boot-starter-log4j:1.1.1.RELEASE",
        quartz_scheduler     : "org.quartz-scheduler:quartz:2.2.1",
        mysql_connector      : "mysql:mysql-connector-java:5.1.33",
        liquibase            : "org.liquibase:liquibase-core:3.3.1",
        atomfeed_client      : "org.ict4h:atomfeed-client:1.9.3",
        atomfeed_commons     : "org.ict4h:atomfeed-commons:1.9.3",
        rome                 : 'com.rometools:rome:1.5.0',
        apache_httpclient    : "org.apache.httpcomponents:httpclient:4.3.5",
        apache_commons_codec : "commons-codec:commons-codec:1.9",
        apache_commons_dbcp  : "commons-dbcp:commons-dbcp:1.4",
        apache_commons_collections : "org.apache.commons:commons-collections4:4.1",
        spring_ctx_support   : "org.springframework:spring-context-support:4.1.1.RELEASE",
        joda                 : "joda-time:joda-time:2.5",
        thymeleaf            : "org.thymeleaf:thymeleaf-spring3:2.1.4.RELEASE",
        free_marker          : "org.freemarker:freemarker:2.3.21",
        spring_web           : "org.springframework:spring-web:4.1.0.RELEASE",
        guava                : "com.google.guava:guava:18.0",
        hapi_fhir_base       : 'ca.uhn.hapi.fhir:hapi-fhir-base:1.5',
        hapi_fhir_structures : 'ca.uhn.hapi.fhir:hapi-fhir-structures-dstu2:1.5',
        phloc_schematron       : 'com.phloc:phloc-schematron:2.7.1',
        phloc_commons          : 'com.phloc:phloc-commons:4.3.6'
]

ext.testLibraries = [
        junit                : "junit:junit:4.10",
        mockito              : "org.mockito:mockito-all:1.8.4",
        wiremock             : "com.github.tomakehurst:wiremock:1.51",
        spring_test          : "org.springframework:spring-test:4.1.1.RELEASE",
        h2_database          : "com.h2database:h2:1.4.182"
]

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web:1.1.8.RELEASE') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude module: "logback-classic"
    }
    compile ('org.springframework.boot:spring-boot-starter-security:1.2.0.RELEASE') {
        exclude module: "logback-classic"
    }
    compile libraries.spring_boot_logging, libraries.quartz_scheduler, libraries.spring_framework, libraries.mysql_connector,
            libraries.liquibase, libraries.atomfeed_client, libraries.atomfeed_commons, libraries.rome,
            libraries.spring_transaction, libraries.spring_jdbc, libraries.apache_httpclient, libraries.apache_commons_codec,
            libraries.apache_commons_dbcp, libraries.spring_ctx_support, libraries.joda, libraries.free_marker,libraries.thymeleaf, libraries.spring_web,
            libraries.guava, libraries.apache_commons_collections,
            libraries.hapi_fhir_base, libraries.hapi_fhir_structures,
            libraries.phloc_schematron, libraries.phloc_commons

    testCompile testLibraries.junit, testLibraries.mockito, testLibraries.spring_test, testLibraries.wiremock,
            libraries.apache_commons_dbcp, libraries.spring_ctx_support, libraries.mysql_connector, testLibraries.h2_database
}

def mainClassName = "org.sharedhealth.datasense.launch.Main"

war {
    from sourceSets.main.resources
    manifest {
        attributes('Main-Class': mainClassName)
    }
}

task runDatasense(type: JavaExec) {
    Properties properties = new Properties();
    properties.load(new FileInputStream(file('env/local.properties')))
    main = mainClassName
    jvmArgs = ['-DDATASENSE_LOG_LEVEL=DEBUG']
    classpath = sourceSets.main.runtimeClasspath
    environment properties
}

task debugDatasense(type: JavaExec) {
    Properties properties = new Properties();
    properties.load(new FileInputStream(file('env/local.properties')))
    main = mainClassName
    jvmArgs = ['-DDATASENSE_LOG_LEVEL=DEBUG']
    classpath = sourceSets.main.runtimeClasspath
    environment properties
    debug = true
}


task dist(type: Rpm, dependsOn: ['build']) {
    packageName = 'datasense'
    version = '2.7'
    release = project.hasProperty('release') ? project.release : '1'
    arch = NOARCH
    os = LINUX

    into '/opt/datasense'

    postInstall = file('scripts/postInstall.sh')
    preUninstall = file('scripts/preUninstall.sh')
    postUninstall = file('scripts/postUninstall.sh')

    from("${buildDir}/etc") {
        fileMode = 0755
        into 'etc'
    }

    from("scripts/rpm") {
        fileMode = 0755
        exclude 'placeholder'
        into 'bin'
    }

    from("${buildDir}/libs") {
        fileMode = 0755
        into 'lib'
    }

    from("scripts/rpm") {
        fileMode = 0755
        exclude 'datasense'
        exclude 'start.sh'
        into 'var'
    }
}
